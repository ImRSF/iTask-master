/**
 * Configure the API routes
 */

let User = require('mongoose').model('User');
let logger = global.logger;

// helper functions

function requireLogin() {
  /**
   * Anything that calls this method will check if a user is logged in or not.
   * If so, let them through. If not, block access.
   */
  return function(req, res, next) {
    if (req.session.passport) {
      next()
    } else {
      res.status(403);
        res.send({success: false, message: "UNAUTHORIZED USER"});
    }
  }
}


function requireRole(role) {
  /**
   * Anything that calls this method will check if a user is logged AND has a
   * user role in the user.roles array that matches the passed in 'role' @param.
   * If so, let them through. If not, block access.
   *
   * @param role == string
   */
  return function(req, res, next) {
    var rl = requireLogin();
    rl(req, res, function() {
      logger.debug("trying to require role");
      logger.debug(req.user.username);
      if(req.user.roles.indexOf(role) === -1) {
        res.status(403);
        res.send({success: false, message: "UNAUTHORIZED - " + role + " PRIVILEDGES REQUIRED"});
      } else {
        logger.debug("authorized.");
        next();
      }
    });
  }
}

// export Yote resource API paths
let routeFilenames = [];
module.exports = function(router) {
  /**
   *
   *
   */
  routeFilenames.forEach(function(filename) {
    logger.debug("filename: " + filename);
    require('../../resources/' + filename)(router, requireLogin, requireRole);
  });
}

// New Yote resource API route names generated by the Yote CLI
routeFilenames.push('user/usersApi');
routeFilenames.push('task/tasksApi');
routeFilenames.push('flow/flowsApi');

routeFilenames.push('note/notesApi');
